# autogenerated DONT EDIT 
#
# Define target specification
# 

linux-g++ {
    MACHTYPE=$$system( echo $MACHTYPE )
    contains( MACHTYPE, i686-vniins-linux-gnu ) {
	HOST=msvs
 	SPEC=msvs
    }
    else {
	contains( MACHTYPE, x86_64-pc-linux-gnu ) {
	    HOST=astra
	    SPEC=astra
	}
	else {
	    HOST=linux
	    SPEC=linux
	}
    }  
}

win32-g++ { 
	HOST=win32
 	SPEC=mingw
}
win32-msvc2010 {
	HOST=win32
 	SPEC=msvc
}


!isEmpty( VERSION_FILE ) {
	exists( $${VERSION_FILE}.build ) {
		include( $${VERSION_FILE}.build  )
	}
	!exists( $${VERSION_FILE}.build ) {
		include( $${VERSION_FILE} )
	}
}

#
#  target selector
#


CONFIG(debug, debug|release) {
        unix: TARGET = $$join(TARGET,,,d)
        win32: TARGET = $$join(TARGET,,,d)
}
defineReplace( version_parts ) {
	eval( VERSION_PARTS = $$replace(VERSION, \\., " ") )
	return( $$VERSION_PARTS )
}

#
# Check developer version
# 
VERSION_PARTS = $$version_parts()
count( VERSION_PARTS, 2 ) {
	VERSION = $${VERSION}.0
	message( devel version )
} 


defineReplace( version_maj ){
	var = $$version_parts()
        return( $$member(var,0) )
}
defineReplace( version_min ) {
	var = $$version_parts()
        return( $$member(var,1) )
}
defineReplace( version_pat ) {
	var = $$version_parts()
        return( $$member(var,2) )
}


SolutionDir = $$dirname( PWD )
ProjectDir  = $$_PRO_FILE_PWD_

#
# Output directory rules
#


BuildDir = $$SolutionDir/build

DESTDIR  = $$BuildDir/bin/$$SPEC
LIBS    += -L$$BuildDir/bin/$$SPEC

UI_DIR         = $$BuildDir/obj/$$SPEC/$$TARGET
OBJECTS_DIR    = $$BuildDir/obj/$$SPEC/$$TARGET
MOC_DIR        = $$BuildDir/obj/$$SPEC/$$TARGET

CONFIG(debug, debug|release) {
 OBJECTS_DIR = $$OBJECTS_DIR/debug
}
CONFIG(release, debug|release) {
 OBJECTS_DIR = $$OBJECTS_DIR/release
}


# Add external library reference


defineReplace( library ){
	libname=$$1
	version=$$2
	
	CONFIG(debug, release|debug) {
		libsuffix = d
	}
	linux-g++ {
		return(-l$${libname}$${libsuffix} )
	}
	win32-g++ {
		return( -l$${libname}$${libsuffix}$${version} )
	}
	win32-msvc2010 {
 		return( -l$${libname}$${libsuffix}$${version} )
	}
	error( platfrom not defined )
}

defineReplace( staticLibrary ){
	libname=$$1
	
	CONFIG(debug, release|debug) {
		libsuffix = d
	}
	linux-g++ {
		return(-l$${libname}$${libsuffix} )
	}
	win32-g++ {
		return( -l$${libname}$${libsuffix} )
	}
	win32-msvc2010 {
 		return( -l$${libname}$${libsuffix} )
	}
	error( platfrom not defined )
}
# Add external library reference


defineReplace( qtlibrary ){
	libname=$$1
	version=$$2
	
	CONFIG(debug, release|debug) {
		libsuffix = d
	}
	linux-g++ {
		return(-l$${libname}$${libsuffix}$${version} )
	}
	win32-g++ {
		return( -l$${libname}$${libsuffix}$${version} )
	}
	win32-msvc2010 {
 		return( -l$${libname}$${libsuffix}$${version} )
	}
	error( platfrom not defined )
}

for( lib, QTLIBS): LIBS += $$qtlibrary( $$lib )
QTLIBS = 
contains(TEMPLATE, subdirs){ 
 	BUILD_ALL = $$(BUILD_ALL)
}


defineReplace( reference ){
	libname=$$1
	!contains(BUILD_ALL,true){ 
		REFERENCES += $$libname
	}
	else {
		message(Import reference ignored by Total build )
	}
	return( $$library( $$libname, $$version_maj()) )
}


defineReplace( staticReference ){
	libname=$$1
	!contains(BUILD_ALL,true){ 
		REFERENCES += $$libname
	}
	else {
		message(Import reference ignored by Total build )
	}
	return( $$staticLibrary( $$libname) )
}




# required for building by reference


CONFIG(debug, debug|release) {
 BUILD_PROFILE = debug
}
CONFIG(release, debug|release) {
 BUILD_PROFILE = release
}




!exists( $$ProjectDir/product.mak ) {
	message( $$ProjectDir/product.mak not found )
}
#
# Prebuild step.
#

exists( $$ProjectDir/product.mak ) {
   defineTest( applyReferences ) {
	HEADERS = $$unique(HEADERS)

	win32-g++ {
		prebuild.commands = $(MAKE) -f product.mak  -C $$ProjectDir \
			MAKE_DESTDIR_TARGET=$$DESTDIR/$$TARGET  \
			HOST=$$HOST \
			MAKE_PLATFORM=$$SPEC \
			HEADERS=\"$$HEADERS\" \
			REFERENCES=\"$$REFERENCES\" \
			BUILD_PROFILE=$$BUILD_PROFILE\
			prebuild
			
		QMAKE_EXTRA_TARGETS += prebuild
		PRE_TARGETDEPS += prebuild

		.NOTPARALLEL.depends = prebuild
		QMAKE_EXTRA_TARGETS += .NOTPARALLEL
		
		PRE_TARGETDEPS      = $$unique(PRE_TARGETDEPS)
		QMAKE_EXTRA_TARGETS = $$unique(QMAKE_EXTRA_TARGETS)
		
	}
	linux-g++ {
		prebuild.commands = $(MAKE) -f product.mak -C $$ProjectDir \
			MAKE_DESTDIR_TARGET=$$DESTDIR/$$TARGET \
			HOST=$$HOST \
			MAKE_PLATFORM=$$SPEC  \
			HEADERS=\"$$HEADERS\" \
			REFERENCES=\"$$REFERENCES\" \
			BUILD_PROFILE=$$BUILD_PROFILE\
			prebuild

		QMAKE_EXTRA_TARGETS += prebuild
		PRE_TARGETDEPS += prebuild

		.NOTPARALLEL.depends = prebuild
		QMAKE_EXTRA_TARGETS += .NOTPARALLEL
		
		PRE_TARGETDEPS      = $$unique(PRE_TARGETDEPS)
		QMAKE_EXTRA_TARGETS = $$unique(QMAKE_EXTRA_TARGETS)

	}

	win32-msvc2010 {
		contains( TEMPLATE, vclib ) | contains( TEMPLATE, vcapp ) {
		QMAKE_PRE_BUILD = mingw32-make -f product.mak -C $$ProjectDir \
			MAKE_DESTDIR_TARGET=$$DESTDIR/$$TARGET \
			HOST=$$HOST \
			MAKE_PLATFORM=$$SPEC  \
			HEADERS=\"$$HEADERS\" \
			REFERENCES=\"$$REFERENCES\" \
			BUILD_PROFILE=$$BUILD_PROFILE\
			prebuild
		}
		else {
		prebuild.commands = mingw32-make -f product.mak -C $$ProjectDir \
			MAKE_DESTDIR_TARGET=$$DESTDIR/$$TARGET \
			HOST=$$HOST \
			MAKE_PLATFORM=$$SPEC  \
			HEADERS=\"$$HEADERS\" \
			REFERENCES=\"$$REFERENCES\" \
			BUILD_PROFILE=$$BUILD_PROFILE\
			prebuild

		QMAKE_EXTRA_TARGETS += prebuild
		PRE_TARGETDEPS += prebuild

		.NOTPARALLEL.depends = prebuild
		QMAKE_EXTRA_TARGETS += .NOTPARALLEL
		
		PRE_TARGETDEPS      = $$unique(PRE_TARGETDEPS)
		QMAKE_EXTRA_TARGETS = $$unique(QMAKE_EXTRA_TARGETS)
		}
		
	}
	export( prebuild )
	export( prebuild.commands )
	export( QMAKE_EXTRA_TARGETS )
	export( PRE_TARGETDEPS )
	export( QMAKE_PRE_BUILD)
  }
  applyReferences()
}

#
# Postbuild step.
#

exists( $$ProjectDir/product.mak ) {

	linux-g++ {
		QMAKE_POST_LINK  += $(MAKE) -f product.mak  -C $$ProjectDir  \
			DESTDIR_TARGET=$$DESTDIR/$$TARGET HOST=$$HOST MAKE_PLATFORM=$$SPEC BUILD_PROFILE=$$BUILD_PROFILE postbuild
	}

	win32-g++ {
		QMAKE_POST_LINK  += $(MAKE) -f product.mak  -C $$ProjectDir  \
			DESTDIR_TARGET=$$DESTDIR/$$TARGET HOST=$$HOST MAKE_PLATFORM=$$SPEC BUILD_PROFILE=$$BUILD_PROFILE postbuild
	}

	win32-msvc2010 {
		QMAKE_POST_LINK  += mingw32-make -f product.mak -C $$ProjectDir \
			DESTDIR_TARGET=$$DESTDIR/$$TARGET HOST=$$HOST MAKE_PLATFORM=$$SPEC BUILD_PROFILE=$$BUILD_PROFILE postbuild
	}
}#
# build import lib.
#

win32-msvc2010 {
 QMAKE_LFLAGS  += /IMPLIB:$${DESTDIR}/$${TARGET}$$version_maj().lib
}


contains(CONFIG,qaxserver){
  win32-msvc2010 {
   QMAKE_POST_LINK  += &amp;&amp; cd "$$DESTDIR"
  }
}#
# Common variables
#

win32-g++|linux-g++  {
	DEFINES += VERSION=\"\\\"$$VERSION\\\"\" 
	DEFINES += SolutionDir=\"\\\"$$SolutionDir\\\"\"
	DEFINES += ProjectName=\"\\\"$$TARGET\\\"\"
}

win32-msvc2010 {
	DEFINES += VERSION=\"$$VERSION\"
	DEFINES += SolutionDir=\"$$SolutionDir\"
	DEFINES += ProjectName=\"$$TARGET\"
}

